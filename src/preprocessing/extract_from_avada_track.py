"""
AVADA is a variant database generated by machine learning software that analyzes full-text research articles. It
identifies gene mentions likely relevant to monogenic (non-cancer) genetic diagnoses, extracts variant descriptions,
and maps these variants to the genome using the identified genes. For more information, refer to the AVADA paper.

Since the data is automatically extracted from publications, some false positives are included. In the original study,
manual curation revealed that only 99 out of 200 randomly selected articles were deemed relevant.

For PS3
"""
import argparse

three_to_one = {
    'Ala': 'A',
    'Arg': 'R',
    'Asn': 'N',
    'Asp': 'D',
    'Cys': 'C',
    'Gln': 'Q',
    'Glu': 'E',
    'Gly': 'G',
    'His': 'H',
    'Ile': 'I',
    'Leu': 'L',
    'Lys': 'K',
    'Met': 'M',
    'Phe': 'F',
    'Pro': 'P',
    'Ser': 'S',
    'Thr': 'T',
    'Trp': 'W',
    'Tyr': 'Y',
    'Val': 'V'
}

amino_acid_to_codon_list = {
    'F': ['TTT', 'TTC'],
    'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'],
    'I': ['ATT', 'ATC', 'ATA'],
    'M': ['ATG'],
    'V': ['GTT', 'GTC', 'GTA', 'GTG'],
    'S': ['TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC'],
    'P': ['CCT', 'CCC', 'CCA', 'CCG'],
    'T': ['ACT', 'ACC', 'ACA', 'ACG'],
    'A': ['GCT', 'GCC', 'GCA', 'GCG'],
    'Y': ['TAT', 'TAC'],
    '*': ['TAA', 'TAG', 'TGA'],
    'H': ['CAT', 'CAC'],
    'Q': ['CAA', 'CAG'],
    'N': ['AAT', 'AAC'],
    'K': ['AAA', 'AAG'],
    'D': ['GAT', 'GAC'],
    'E': ['GAA', 'GAG'],
    'C': ['TGT', 'TGC'],
    'W': ['TGG'],
    'R': ['CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'],
    'G': ['GGT', 'GGC', 'GGA', 'GGG'],
}


def clean_and_extract_columns(input_file, gene_out_file, variant_out_file):
    """
    The AVADA track columns are 

        chrom	0
        chromStart	1
        chromEnd	2
        name	3
        score	4
        strand	5
        thickStart	6
        thickEnd	7
        reserved	8
        geneSym	9
        variant	10
        ensId	11
        entrezs	12
        refSeq	13
        pmid	14
        title	15
        authors	16
        ref	17
        doi	18
        abstract	19
        _mouseOver	20

    """
    # Read the file, clean corrupted characters, and extract specified columns
    skipped_lines = 0
    with open(input_file, 'rb') as infile, open(gene_out_file, 'w', encoding='utf-8') as outfile, open(variant_out_file, 'w', encoding='utf-8') as outfile2:
        for binary_line in infile:
            # Decode this line
            decoded_line = binary_line.decode('utf-8', errors='ignore').strip().split()
            chrom, start = decoded_line[:2]
            gene, variant = decoded_line[9:11]
            pubmed_id = decoded_line[14]
           
            try:
                if variant.startswith("p.") or (amino_acid_to_codon_list.get(variant[0]) and amino_acid_to_codon_list.get(variant[-1])):
                    clean_variant = variant.strip("p.") # Remove the p. if its present
                    if three_to_one.get(clean_variant[:3]): # This variant uses long names, ie Val, lets standardize it
                        clean_variant = three_to_one[clean_variant[:3]] + clean_variant[3:-3] + three_to_one[clean_variant[-3:]]
                    outfile.write(f"{gene}\t{clean_variant}\t{pubmed_id}\n")        
                else:
                    clean_variant = variant.strip("c.") # Remove the c. if its present
                    pos = ""
                    ref = ""
                    alt = ""
                    for char in clean_variant:
                        if char in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
                            pos += char
                        else:
                            if char not in ['A', 'C', 'T', 'G']:
                                continue
                            if ref:
                                alt = char
                            else:
                                ref = char
                    if not ref or not alt:
                        skipped_lines += 1
                        continue
                    outfile2.write(f"{chrom}\t{start}\t{ref}\t{alt}\t{pubmed_id}\n")
            except:
                skipped_lines +=1 
                continue
    #print(f"Skipped {skipped_lines} lines")
    

def main():
    """
    Main extractor
    """
    parser = argparse.ArgumentParser(description="Clean a TSV file and extract specified columns.")
    parser.add_argument('input_file', type=str, help='Input TSV file with potential corrupted characters.')
    parser.add_argument('gene_aa_file', type=str, help='Output TSV file with cleaned and extracted data.')
    parser.add_argument('variant_file', type=str, help='Output TSV file with cleaned and extracted data.')

    args = parser.parse_args()
    
    clean_and_extract_columns(args.input_file, args.gene_aa_file, args.variant_file)

if __name__ == "__main__":
    main()
